{"version":3,"sources":["utils.js","index.js"],"names":["EUR","USD","PLN","formatDateForRequest","date","mm","getMonth","dd","getDate","getFullYear","join","getBankUrl","currency","module","hot","accept","window","dataStore","currentCurrency","currentDate","Date","isDataLoading","error","currenciesByDates","renderApp","setCurrency","value","setDate","isCurrentExchangeRateLoaded","Boolean","getCachedExchangeRateByDate","getExchangeRates","exchangeRateToday","yesterday","ratesByDay","loadData","url","fetch","then","response","json","data","document","getElementById","innerHTML","App","RenderDynamicContent","ExchangeRateToday","ChooseCurrency","ChooseDate","exchangeRateYesterday","displayExchangeRateToday","currentState","performDataLoading","rateDifference","toFixed","rateDifferenceStr","toLocaleDateString","dateStr","catch","finally","setCurrencyCB","content","map","setDateCB","toISOString","split"],"mappings":"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","file":"kottans-own-framework.838b6a80.js","sourceRoot":"..","sourcesContent":["export const EUR = 'EUR';\nexport const USD = 'USD';\nexport const PLN = 'PLN';\n\nexport function formatDateForRequest(date) {\n  // 02-03-2020 will be like `20200302`\n  // from https://stackoverflow.com/a/3067896/10849913\n  const mm = date.getMonth() + 1; // getMonth() is zero-based\n  const dd = date.getDate();\n\n  return [date.getFullYear(), (mm > 9 ? '' : '0') + mm, (dd > 9 ? '' : '0') + dd].join('');\n}\n\nexport function getBankUrl(currency, date) {\n  const dateStr = formatDateForRequest(date);\n\n  return `https://bank.gov.ua/NBUStatService/v1/statdirectory/exchange?valcode=${currency}&date=${dateStr}&json`;\n}\n","import { getBankUrl, formatDateForRequest, EUR, PLN, USD } from './utils';\n\nif (module.hot) {\n  module.hot.accept();\n}\n\nwindow.dataStore = {\n  currentCurrency: USD,\n  currentDate: new Date('2021-04-21T12:00+03:00'),\n  isDataLoading: false,\n  error: null,\n  currenciesByDates: {}, // cache\n};\n\nwindow.renderApp = renderApp;\n\nconst setCurrency = function (value) {\n  window.dataStore.currentCurrency = value;\n  window.renderApp();\n};\n\nconst setDate = function (value) {\n  window.dataStore.currentDate = new Date(value);\n  window.renderApp();\n};\n\nfunction isCurrentExchangeRateLoaded(currentCurrency, currentDate) {\n  return Boolean(getCachedExchangeRateByDate(currentCurrency, currentDate));\n}\n\nfunction getExchangeRates(currentCurrency, currentDate) {\n  const exchangeRateToday = getCachedExchangeRateByDate(currentCurrency, currentDate);\n\n  const yesterday = new Date(currentDate);\n  yesterday.setDate(yesterday.getDate() - 1);\n  const exchangeRateYesterday = getCachedExchangeRateByDate(currentCurrency, yesterday);\n\n  return [exchangeRateToday, exchangeRateYesterday];\n}\n\nfunction getCachedExchangeRateByDate(currency, date) {\n  const ratesByDay = window.dataStore.currenciesByDates[formatDateForRequest(date)];\n  if (ratesByDay) {\n    return ratesByDay[currency] ? ratesByDay[currency][0]['rate'] : null;\n  }\n}\n\nfunction loadData() {\n  const { currentCurrency, currentDate } = window.dataStore;\n  const url = getBankUrl(currentCurrency, currentDate);\n\n  return fetch(url)\n    .then(response => response.json())\n    .then(data => ({ data }));\n}\n\nfunction renderApp() {\n  document.getElementById('app-root').innerHTML = `\n        ${App()}\n    `;\n}\n\nwindow.renderApp = renderApp;\nwindow.performDataLoading = performDataLoading;\nwindow.loadData = loadData;\n\nrenderApp();\n\n/**\n * @return {string}\n */\nfunction App() {\n  return `    \n      <div class=\"container py-4 w-50\">\n        <header class=\"pb-3 mb-4 border-bottom\">\n          <a href=\"#\" class=\"d-flex align-items-center text-dark text-decoration-none\">\n            <span class=\"fs-4\">Get your Exchange rate</span>\n          </a>\n        </header>\n\n        <div class=\"p-5 mb-4 bg-light rounded-3\">${RenderDynamicContent()}</div>\n    `;\n}\n\n/**\n * @return {string}\n */\nfunction RenderDynamicContent() {\n  return `<div class=\"container py-5 p-5 mb-4 bg-light rounded-3\">\n  ${ExchangeRateToday()}\n  <div class=\"row align-items-start\">\n      <div class=\"col-6\">\n      ${ChooseCurrency(window.dataStore.currentCurrency, setCurrency)}\n      ${ChooseDate(window.dataStore.currentDate, setDate)}\n </div>\n</div>`;\n}\n\n/**\n * @return {string}\n */\nfunction ExchangeRateToday() {\n  const { currentCurrency, currentDate } = window.dataStore;\n\n  if (isCurrentExchangeRateLoaded(currentCurrency, currentDate)) {\n    const [exchangeRateToday, exchangeRateYesterday] = getExchangeRates(\n      currentCurrency,\n      currentDate,\n    );\n    return displayExchangeRateToday(\n      currentCurrency,\n      exchangeRateToday,\n      currentDate,\n      exchangeRateYesterday,\n    );\n  }\n\n  let currentState = '';\n  if (window.dataStore.error !== null) {\n    currentState = window.dataStore.error;\n  } else if (window.dataStore.isDataLoading) {\n    currentState = 'Loading...';\n  } else {\n    window.performDataLoading(currentCurrency, currentDate);\n  }\n\n  return `\n  <h1 class=\"display-5 fw-bold\">\n      ${currentState}      \n  </h1>\n  `;\n}\n\nfunction displayExchangeRateToday(currency, exchangeRateToday, date, exchangeRateYesterday) {\n  const rateDifference =\n    exchangeRateToday && exchangeRateYesterday\n      ? (exchangeRateToday - exchangeRateYesterday).toFixed(2)\n      : null;\n\n  const exchangeRate = exchangeRateToday || 'Not Available';\n\n  const dateString = date.toLocaleDateString();\n\n  let rateDifferenceStr = '';\n  if (rateDifference) {\n    const differenceStyle = rateDifference > 0 ? 'success' : 'danger';\n    const sign = rateDifference > 0 ? '+' : '';\n    rateDifferenceStr = `<span class=\"text-${differenceStyle} fs-3\">${sign}${rateDifference}</span>`;\n  }\n\n  return `\n  <h1 class=\"display-5 fw-bold\">\n      <span class=\"text-secondary\">${currency}:</span>\n      ${exchangeRate}\n      ${rateDifferenceStr}      \n  </h1>\n    <p class=\"text-secondary\">\n      Rate for ${dateString}\n  </p> \n  `;\n}\n\nfunction performDataLoading(currency, date) {\n  window.dataStore.error = null;\n  window.dataStore.isDataLoading = true;\n\n  window\n    .loadData()\n    .then(({ error, data }) => {\n      window.dataStore.isDataLoading = false;\n      if (error) {\n        window.dataStore.error = error;\n      } else if (data) {\n        const dateStr = formatDateForRequest(date);\n\n        if (!(dateStr in window.dataStore.currenciesByDates)) {\n          window.dataStore.currenciesByDates[dateStr] = {};\n        }\n        window.dataStore.currenciesByDates[dateStr][currency] = data;\n      }\n    })\n    .catch(error => {\n      window.dataStore.error = 'Some error occurred.';\n    })\n    .finally(window.renderApp);\n}\n\n/**\n * @return {string}\n */\nfunction ChooseCurrency(currentCurrency, setCurrencyCB) {\n  const currencies = [{ value: USD }, { value: EUR }, { value: PLN }];\n  let content = `\n    <label for=\"id_select\">Choose currency:</label>\n    <select id=\"id_select\" class=\"form-select\" \n    autofocus=\"true\" onchange=\"(${setCurrencyCB})(this.value);\">\n  `;\n\n  content += currencies\n    .map(({ value }) => {\n      const selected = currentCurrency === value ? 'selected' : '';\n      return `<option value=\"${value}\" ${selected}>${value}</option>`;\n    })\n    .join('');\n  content += `</select>`;\n  return content;\n}\n\n/**\n * @return {string}\n */\nfunction ChooseDate(currentDate, setDateCB) {\n  // get date in `yyyy-mm-dd` format\n  const dateStr = currentDate.toISOString().split('T')[0];\n\n  return `\n    <div class=\"mt-3\">\n        <label for=\"dateInput\" class=\"form-label\">Choose date:</label>\n        <input type=\"date\"\n               value=\"${dateStr}\"\n               onchange=\"(${setDateCB})(this.value);\"\n               class=\"form-control\"\n               id=\"dateInput\">\n    </div>\n`;\n}\n"]}